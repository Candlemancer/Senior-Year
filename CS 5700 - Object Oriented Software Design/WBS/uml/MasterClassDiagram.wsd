@startuml

class Schedule.Schedule {
    + Schedule()
    + ~Schedule()
    + std::shared_ptr<ParentTask> getWBS()
    + std::shared_ptr<Workforce> getEngineers()
    + void setWBS(std::shared_ptr<ParentTask> wbs) 
    + void setEngineers(std::shared_ptr<Workforce> e) 

    + std::vector<WorkDay> getSchedule()

    - std::shared_ptr<ParentTask> m_wbs
    - std::shared_ptr<Workforce> m_engineers
}
Schedule.Schedule -- Schedule.WorkDay : Creates
Schedule.Schedule o-- Schedule.Workforce
Schedule.Schedule o-- WBS.ParentTask

class Schedule.WorkDay {
    + WorkDay()
    + ~WorkDay()
    + const static int WORKDAY_LENGTH
    + int getHoursFilled() 
    + std::vector<std::shared_ptr<Task>> getTasks()
    + std::vector<std::shared_ptr<Workforce>> getWorkers()
    + void addAssignment(int hours, std::shared_ptr<Task> task, std::shared_ptr<Workforce> worker)

    - int m_hoursFilled
    - std::vector<std::shared_ptr<Task>> m_tasks
    - std::vector<std::shared_ptr<Workforce>> m_workers
}
Schedule.WorkDay o-- Schedule.Workforce
Schedule.WorkDay o-- WBS.Task

class Schedule.Workforce {
    + Workforce()
    + Workforce(int hoursAvailable)
    + virtual ~Workforce()
    + {abstract} virtual std::chrono::hours getDailyAvailability

    - std::chrono::hours m_dailyAvailability
}
Schedule.Workforce <|-- Schedule.Engineer
Schedule.Workforce <|-- Schedule.EngineerTeam

class Schedule.Engineer {
    + Engineer(int id, std::string name, int hoursAvailable)
    + virtual ~Engineer()
    + virtual std::chrono::hours getDailyAvailability()
    + void setDailyAvailability(std::chrono::hours dailyHours)
    + std::string getName()
    + int getID()

    # int m_id;
    # std::string m_name;

    - const static int FULL_TIME_DAILY_HOURS;
    - const static int MAX_HOURS_PER_DAY;
    - const static int MIN_HOURS_PER_DAY;
}

class Schedule.EngineerTeam {
    + EngineerTeam()
    + virtual ~EngineerTeam()
    + virtual std::chrono::hours getDailyAvailability()
    + std::vector<std::shared_ptr<Workforce> getMembers()
    + void setMembers(std::vector<std::shared_ptr<Workforce> engineers)
    + void addTeamMember(std::shared_ptr<Workforce> member)
    + void removeTeamMember(int id)

    - std::vector<std::shared_ptr<Workforce>> m_members
}
Schedule.EngineerTeam o-- Schedule.Workforce

class WBS.Task {
    + Task(int id, std::string label, std::string description, int hoursEstimate, std::shared_ptr<Task> parent = nullptr)
    + virtual ~Task()
    + {abstract} virtual void accept(std::shared_ptr<TaskVisitor> visitor)

    + int getID()
    + std::string getLabel()
    + std::string getDescription()
    + std::vector<std::shared_ptr<Workforce>> getEngineers()
    + std::shared_ptr<Task> getParent()
    + virtual int getOriginalHoursEstimate()
    + {abstract} virtual int getCurrentHoursEstimate()
    + {abstract} virtual double getPercentComplete()
    + {abstract} virtual int getHoursRemaining()
    + {abstract} virtual int getWorkDaysRemaining()

    + void setLabel(std::string label)
    + void setDescription(std::string desc)
    + void setEngineers(std::vector<std::shared_ptr<Workforce>> engineers)
    + void setParent(std::shared_ptr<Task> parent)

    + void addEngineer(std::shared_ptr<Workforce> engr)
    + bool operator==(Task* that)
    + bool operator!=(Task* that)

    # const int m_id;
    # std::string m_label;
    # std::string m_description;
    # std::vector<std::shared_ptr<Workforce>> m_engineers;
    # const std::chrono::hours m_originalHoursEstimate;
    # std::chrono::hours m_currentHoursEstimate;
    # double m_percentComplete;
    # std::chrono::hours m_remainingHours;
    # int m_remainingDays;
    # std::shared_ptr<Task> m_parent;
}
WBS.Task <|-- WBS.LeafTask
WBS.Task <|-- WBS.ParentTask
WBS.Task -- Visitor.TaskVisitor : Visits
WBS.Task --o WBS.ParentTask

class WBS.LeafTask {
    + LeafTask(int id, std::string label, std::string description, int hoursEstimate)  
    + virtual ~LeafTask()
    + virtual int getCurrentHoursEstimate()
    + virtual double getPercentComplete()
    + virtual int getHoursRemaining()
    + virtual int getWorkDaysRemaining()
    + virtual void accept(std::shared_ptr<TaskVisitor> visitor)
    + void setCurrentHoursEstimate(int hoursEstimate);
    + void setPercentComplete(double percentComplete);
}
WBS.LeafTask <.. Builder.TaskBuilder : Builds

class Iterator.TreeIterator {
    + TreeIterator(std::shared_ptr<Task> rootNode)
    + ~TreeIterator()
    + TreeIterator& operator++()
    + std::shared_ptr<Task> operator*()
    + bool operator==(const TreeIterator& that)
    + bool operator!=(const TreeIterator& that)
    + std::shared_ptr<Task> getNode() const

    - std::shared_ptr<Task> breadthFirstSearch(std::shared_ptr<Task> root, int length);
    - std::shared_ptr<Task> m_root;
    - std::shared_ptr<Task> m_node;
    - int m_index;
}
Iterator.TreeIterator -- WBS.ParentTask

class WBS.ParentTask {
    + ParentTask(int id, std::string label, std::string description)
    + virtual ~ParentTask()
    + virtual double getPercentComplete()
    + std::vector<std::shared_ptr<Task>> getTasks()
    + void setTasks(std::vector<std::shared_ptr<Task>> tasks)
    + void addTask(std::shared_ptr<Task> task)

    + TreeIterator begin();
    + TreeIterator end();

    # std::vector<std::shared_ptr<Task>> m_tasks;
}
WBS.ParentTask <|-- WBS.SequentialParentTask
WBS.ParentTask <|-- WBS.ParallelParentTask

class WBS.SequentialParentTask {
    + SequentialParentTask(int id, std::string label, std::string description)
    + virtual ~SequentialParentTask()
    + virtual int getOriginalHoursEstimate()
    + virtual int getCurrentHoursEstimate()
    + virtual int getHoursRemaining()
    + virtual int getWorkDaysRemaining()
    + virtual void accept(std::shared_ptr<TaskVisitor> visitor)
}
WBS.SequentialParentTask <.. Builder.TaskBuilder : Builds

class WBS.ParallelParentTask {
    ParallelParentTask(int id, std::string label, std::string description)
    virtual ~ParallelParentTask()
    virtual int getOriginalHoursEstimate()
    virtual int getCurrentHoursEstimate()
    virtual int getHoursRemaining()
    virtual int getWorkDaysRemaining()
    virtual void accept(std::shared_ptr<TaskVisitor> visitor)
}
WBS.ParallelParentTask <.. Builder.TaskBuilder : Builds

class Builder.TaskBuilder {
    + TaskBuilder()
    + ~TaskBuilder()
    + TaskBuilder& setType(TaskType currentType)
    + TaskBuilder& setLabel(std::string currentLabel)
    + TaskBuilder& setDescription(std::string currentDescription)
    + TaskBuilder& setHours(int currentHoursEstimate)
    + std::shared_ptr<Task> build()

    - int m_currentTaskID
 
    - TaskType m_currentType
    - std::string m_currentLabel
    - std::string m_currentDescription
    - int m_currentOriginalHoursEstimate

    - const TaskType m_defaultType
    - const std::string m_defaultLabel
    - const std::string m_defaultDescription
    - const int m_defaultOriginalHoursEstimate
}

class Visitor.TaskVisitor {
    + TaskVisitor()
    + virtual ~TaskVisitor()
    + {abstract} virtual void visit(std::shared_ptr<LeafTask> leaf)
    + {abstract} virtual void visit(std::shared_ptr<SequentialParentTask> parent)
    + {abstract} virtual void visit(std::shared_ptr<ParallelParentTask> parent)
}
Visitor.TaskVisitor <|-- Visitor.XMLOutputVisitor
Visitor.TaskVisitor <|-- Visitor.OutlineVisitor

class Visitor.XMLOutputVisitor {
    + XMLOutputVisitor(std::string filename)
    + virtual ~XMLOutputVisitor()
    + virtual void visit(std::shared_ptr<LeafTask> leaf)
    + virtual void visit(std::shared_ptr<SequentialParentTask> parent)
    + virtual void visit(std::shared_ptr<ParallelParentTask> parent)

    - const static int INDENT_WIDTH
    - std::string getIndent(std::shared_ptr<Task> node)
    - std::string printTag(std::string label, std::string value)
    - std::fstream fout
}

class Visitor.OutlineVisitor {
    + OutlineVisitor(std::string filename)
    + virtual ~OutlineVisitor()
    + virtual void visit(std::shared_ptr<LeafTask> leaf)
    + virtual void visit(std::shared_ptr<SequentialParentTask> parent)
    + virtual void visit(std::shared_ptr<ParallelParentTask> parent)

    - std::string getPrefix(std::shared_ptr<Task> node)
    - std::fstream fout
}

@enduml
